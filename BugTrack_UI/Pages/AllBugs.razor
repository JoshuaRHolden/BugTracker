@page "/AllBugs"
@page "/"

@using BugTrack_UI.Components
@using BugTrack_UI.Store.Actions;
@using BugTrack_UI.Store.Effects;
@using BugTrack_UI.Store.State;
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IState<BugState> BugState
@inject IDispatcher _Dispatcher
@inject IJSRuntime ijsr;
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<AuthorizeView>
    <Authorized>
        <h3> <span class="oi oi-bug" aria-hidden="true"></span>Bug Manager</h3>
        <br/>
        <div class="row">
            <div class="col-3">
                <button class="btn btn-black" @onclick="CreateBug">

                     <span class="oi oi-plus" aria-hidden="true"></span>
                    Create New Bug
                </button>
            </div>
            <div class="col-5">
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                    </div>
                    <div class="input-group-text group-black">Search bugs<p class="oi oi-magnifying-glass"></p></div>
                    <input class="form-control me-1" value="@BugState.Value.SearchText" @oninput="GetSearch" type="text" placeholder="Search for bug" aria-label="Search">
                </div>
            </div>
            <div class="col-3">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" value="@BugState.Value.AssignedToMe" checked="@BugState.Value.AssignedToMe" @oninput="CheckboxChanged" id="assignedToMe">
                    <label class="form-check-label" for="assignedToMe">
                        Only assigned to me
                    </label>
                </div>
                
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" value="@BugState.Value.IncludeClosed" checked="@BugState.Value.IncludeClosed" @oninput="CheckboxIncludeClosedChanged" id="includeClosed">
                    <label class="form-check-label" for="includeClosed">
                        Include Closed
                    </label>
                </div>
            </div>           
        </div>
        <div class="dropdown-divider"></div>
        <BugTrack_UI.Components.EditModal CurrentBug="@BugState.Value.CurrentBug"></BugTrack_UI.Components.EditModal>
        <BugTrack_UI.Components.CreateModal EditingBug="bug"></BugTrack_UI.Components.CreateModal>
        @{
        }
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @if (BugState.Value.HasCurrentErrors)
            {
                <div class="h2">
                    An error Occurred :(
                </div>
            }
            else if (BugState.Value.IsLoading)
            {
                <div class="h4"> Loading...</div>
            }
            else if ((BugState.Value.CurrentBugs is not null) && BugState.Value.CurrentBugs.Any())
            {

                foreach (var bug in BugState.Value.CurrentBugs)
                {
                    <BugCardEdit TheBug=bug></BugCardEdit>
                }
            }
            
        </div>
    </Authorized>
    <NotAuthorized>
        <RegisterUser></RegisterUser>
    </NotAuthorized>
</AuthorizeView>

@code {
    Bug bug = new Bug();
    protected override async Task OnInitializedAsync()
    {
        if (BugState.Value.CurrentBugs is null)
        {
            _Dispatcher.Dispatch(new LoadBugEffect.EffectBugAction(BugState.Value.AssignedToMe, BugState.Value.IncludeClosed));
        }
        await base.OnInitializedAsync();
    }

    protected void EditCurrentBug(int Id)
    {
        _Dispatcher.Dispatch(new EditBugEffect.EffectEditBug(Id));
    }

    protected void CheckboxChanged(ChangeEventArgs e)
    {
        if (e is not null && e.Value is not null)
        {
            var x = bool.Parse(e!.Value!.ToString()!);
            _Dispatcher.Dispatch(new AssignedToMeCheckChangedEffect.EffectCheckChanged(x));
            _Dispatcher.Dispatch(new LoadBugEffect.EffectBugAction(BugState.Value.AssignedToMe, BugState.Value.IncludeClosed));
        }
    }

    protected void CheckboxIncludeClosedChanged(ChangeEventArgs e)
    {
        if (e is not null && e.Value is not null)
        {
            var x = bool.Parse(e.Value.ToString()!);
            _Dispatcher.Dispatch(new IncludeCancelledCheckChangedEffect.EffectCheckChanged(x));
            _Dispatcher.Dispatch(new LoadBugEffect.EffectBugAction(BugState!.Value!.AssignedToMe!, BugState!.Value!.IncludeClosed!));
        }
    }

    protected void CreateBug()
    {
        _Dispatcher.Dispatch(new CreateBugStartEffect.EffectStartCreateBug());
    }

    protected void GetSearch(ChangeEventArgs ce)
    {
        if (ce.Value != null && ce.Value.ToString()!.Length! >= 1){
            _Dispatcher.Dispatch(new SearchBugEffect.EffectSearchBug(ce!.Value!.ToString()!,BugState.Value.AssignedToMe,BugState.Value.IncludeClosed));
        }
        else
        {
            _Dispatcher.Dispatch(new LoadBugEffect.EffectBugAction(BugState.Value.AssignedToMe, BugState.Value.IncludeClosed));
        }
    }
}